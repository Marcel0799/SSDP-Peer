package edu.udo.cs.rvs.ssdp;

import java.util.LinkedList;

public class Worker implements Runnable {
	
	Listen listener;
	LinkedList<String> nachrichten;
	LinkedList<Device> geraete = new LinkedList<>();
	boolean running;
		
	public Worker(Listen li) {
		running = true;
		this.listener = li;
	}
	
	public void run() {
		while(running) {
			
			nachrichten = listener.getList();
			LinkedList<String> workingList = new LinkedList<>();
			
			synchronized(nachrichten) {
				while(!nachrichten.isEmpty()) {
					workingList.add(nachrichten.removeFirst());
				}
			}
			
			
			String[] result;
			String[] line;
			String[] services;
			Device devi = new Device();
			

			while(!workingList.isEmpty()) {
				
				result = workingList.removeFirst().split("\r\n");
				
				if(result[0].compareTo("HTTP/1.1 200 OK")==0) {

					for (int i = 1; i<result.length; i++) {
						line = result[i].split(":");
						services = result[i].split(":",2); 

						if(line[0].equals("USN")) {
							devi.addUuid(line[2].trim());
						}	else 
						if(line[0].equals("ST")) {
							devi.addDienst(services[1].trim());
						}
					}
					hinzufuegen(devi);
				} 
				
				else if(result[0].compareTo("NOTIFY * HTTP/1.1")==0) {
				
					for (int i = 1; i<result.length; i++) {
						line = result[i].split(":");
						services = result[i].split(":",2); 

						if(line[0].equals("USN")) {
							devi.addUuid(line[2].trim());
						}	else
						if(line[0].equals("NTS") && line[2].equals("byebye")) {	
							devi.abmelden();
						}	else 
						if(line[0].equals("NT")) {
							devi.addDienst(services[1].trim());
						}
					}
					hinzufuegen(devi);
				}

			}
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void end() {
		running = false;
	}
	
	public void hinzufuegen(Device d) {

		synchronized(geraete) {
			if(d.getAbmelden()) {
				if(geraete.contains(d)) {
					geraete.remove(d);
				}
				//else do nothing
			}	else {
				if(!geraete.contains(d)) {
					geraete.add(d);
				}	else {
					int index = geraete.indexOf(d);
					Device devi = geraete.get(index);
					if(!devi.getDienste().contains(d.getDienste().getFirst())) {
						devi.addDienst(d.getDienste().getFirst());
					}
				}
			}

		}
	}
	
	public LinkedList<Device> getGeraete() {
		synchronized(geraete) {
			return geraete;
		}
	}
	
	public void clearGeraete() {
		synchronized(geraete) {
			geraete = new LinkedList<Device>();
		}
	}
}
